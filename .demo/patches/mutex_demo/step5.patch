Index: /src/examples/4_mutex_demo/src/main.rs
===================================================================
--- /src/examples/4_mutex_demo/src/main.rs
+++ /src/examples/4_mutex_demo/src/main.rs
@@ -1,3 +1,69 @@
-fn main() {
-    println!("Hello, world!");
+use std::sync::Arc;
+use tokio::{
+    fs::File,
+    io::AsyncWriteExt,
+    sync::Mutex,
+    time::{Duration, Instant, sleep},
+};
+
+const FILE_PATH: &str = "foo.txt";
+
+#[tokio::main]
+async fn main() {
+    let start_time = Arc::new(Instant::now());
+    let counter = Arc::new(Mutex::new(0));
+    let _create_and_truncate = File::options()
+        .create(true)
+        .write(true)
+        .truncate(true)
+        .open(FILE_PATH)
+        .await
+        .unwrap();
+    let file = Arc::new(Mutex::new(
+        File::options().append(true).open(FILE_PATH).await.unwrap(),
+    ));
+
+    let task_1 = tokio::spawn({
+        let start_time = start_time.clone();
+        let counter = counter.clone();
+        let file = file.clone();
+
+        async move {
+            println!("Starting task_1 at {}µs", start_time.elapsed().as_micros());
+            let mut file_lock = file.lock().await;
+            sleep(Duration::from_millis(400)).await;
+            let mut lock = counter.lock().await;
+            *lock += 1;
+
+            file_lock.write_all(b"Task 1 was here!\n").await.unwrap();
+            file_lock.flush().await.unwrap();
+
+            println!("[task_1] Took {}ms", start_time.elapsed().as_millis());
+        }
+    });
+
+    let task_2 = tokio::spawn({
+        let start_time = start_time.clone();
+        let counter = counter.clone();
+        let file = file.clone();
+
+        async move {
+            println!("Starting task_2 at {}µs", start_time.elapsed().as_micros());
+            let mut lock = counter.lock().await;
+            sleep(Duration::from_millis(100)).await;
+            *lock += 1;
+
+            let mut file_lock = file.lock().await;
+            file_lock.write_all(b"Task 2 was here!\n").await.unwrap();
+            file_lock.flush().await.unwrap();
+
+            println!("[task_2] Took {}ms", start_time.elapsed().as_millis());
+        }
+    });
+
+    let _ = task_1.await;
+    let _ = task_2.await;
+
+    let lock = counter.lock().await;
+    println!("Counter = {}", lock);
 }
