Index: /src/examples/8_rwlock_demo/src/main.rs
===================================================================
--- /src/examples/8_rwlock_demo/src/main.rs
+++ /src/examples/8_rwlock_demo/src/main.rs
@@ -1,3 +1,46 @@
-fn main() {
-    println!("Hello, world!");
+use std::sync::Arc;
+use tokio::sync::RwLock;
+use tokio::time::{Duration, sleep};
+
+#[derive(Default, Debug)]
+struct SharedState {
+    counter: RwLock<u32>,
 }
+
+async fn reader(state: Arc<SharedState>, task_id: String) {
+    let counter = state.counter.read().await;
+    println!("Task #{} reading counter: {:?}", task_id, counter);
+}
+
+async fn writer(state: Arc<SharedState>, value: u32, task_id: String) {
+    let mut counter = state.counter.write().await;
+    *counter += value;
+    println!("Task #{} writing counter: {:?}", task_id, counter);
+}
+
+#[tokio::main]
+async fn main() {
+    let state = Arc::new(SharedState {
+        counter: RwLock::new(0),
+    });
+
+    let mut handles = vec![];
+    for i in 1..10 {
+        // reader
+        handles.push(tokio::spawn(reader(state.clone(), "reader_1".to_string())));
+        // writer
+        handles.push(tokio::spawn(writer(state.clone(), i, "writer".to_string())));
+        // Grants order of execution
+        sleep(Duration::from_millis(1)).await;
+        // reader
+        handles.push(tokio::spawn(reader(state.clone(), "reader_2".to_string())));
+        // reader
+        handles.push(tokio::spawn(reader(state.clone(), "reader_3".to_string())));
+        // Grants order of execution
+        sleep(Duration::from_millis(1)).await;
+    }
+
+    for handle in handles {
+        handle.await.unwrap();
+    }
+}
